/*
--security definition for the api endpoint specifed in the subsequent route
[SwaggerSecurityDefinition(Name="oauth2securitydefinition", In = "", Type = "oauth2", Flow = "implicit", AuthorizationUrl = "https://login.salesforce.com/services/oauth2/token", Scopes = "[{ name = "readAccess", description = "Access read operations" }, { name = "writeAccess", description = "Access write operations" }]")]
--the route definition
[SwaggerRoute("/api/v1/resource/", Id = "route1", SecurityDefinitionId = "oauth2securitydefinition" )]
--the route operation
[SwaggerOperation( RouteId = "route1", Verb = "POST", Summary = "Creates the resource", Description = "Performs the creation of a resource", OperationId = "DoWork1", Tags = ["DoWork"], Consumes = ["application/json"], Produces = ["application/json"]]
--the route input properties
[SwaggerInput( RouteId = "route1", OperationId = "DoWork1", InputType = "QueryString", Name = "isTest", Type = "Boolean", Description = "Indicates if the request is a test", Required = false)]
--the route input properties
[SwaggerInput( RouteId = "route1", OperationId = "DoWork1",  InputType = "Body", Name = "RequestBody", Type = "Map<String, String>", Description = "The data", Required = true)]
--the route response
[SwaggerResponse( RouteId = "route1", OperationId = "DoWork1", Id = "r"   HttpStatusCode = 200, Description = "The asynchronous request was successful", Type = "Response_v1")]
--the route response
[SwaggerResponse( RouteId = "route1", OperationId = "DoWork1", Id = "r0"  HttpStatusCode = 201, Description = "The syncchronous request was successful", Type = "Response_v1")]
--the route response
[SwaggerResponse( RouteId = "route1", OperationId = "DoWork1", Id = "r1"   HttpStatusCode = 500, Description = "Internal Server Error", Type = "")]
--the route response header
[SwaggerResponseHeader( ResponseId = "r1", RouteId = "route1", OperationId = "DoWork1",  HttpStatusCode = 500, Description = "Error Code", Key = "x-error-code", Value = "200.1")]
--the route response header
[SwaggerResponseHeader( ResponseId = "r1", RouteId = "route1", OperationId = "DoWork1",  HttpStatusCode = 500, Description = "Error Description", Key = "x-error-description", Value = "details about the error")]
--the route response header
[SwaggerResponseHeader( ResponseId = "r1",  RouteId = "route1", OperationId = "DoWork1",  HttpStatusCode = 500, Description = "Error Line Number", Key = "x-error-linenumber", Value = "the line number associated to the error")]
--the route response
[SwaggerResponse( RouteId = "route1", OperationId = "DoWork1", Id = "r2"  HttpStatusCode = 500, Description = "General Failure", Type = "null")]
--the route response header
[SwaggerResponseHeader(RouteId = "route1", OperationId = "DoWork1",  responseId = "r2", HttpStatusCode = 500, Description = "Error Code", Key = "x-error-code", Value = "200.0")]
--the route response header
[SwaggerResponseHeader(RouteId = "route1", OperationId = "DoWork1", responseId = "r2", HttpStatusCode = 500, Description = "Error Description", Key = "x-error-description", Value = "details about the error")]
--the route response header
[SwaggerResponseHeader(RouteId = "route1", OperationId = "DoWork1", responseId = "r2", HttpStatusCode = 500, Description = "Error Line Number", Key = "x-error-linenumber", Value = "the line number associated to the error")]
--the response object
[SwaggerObject(Type = "Response_v1", Name = "Response_v1", Description = "The response v1", Id = "Object1")]
--the response object property
[SwaggerObjectProperty( ObjectId = "Object1",  Type = "Boolean", Name = "isSuccessful", Description = "Specifies if the response was successful or not", Required = false)]
--the response object property
[SwaggerObjectProperty(  ObjectId = "Object1",  Type = "String", Name = "messages", Description = "Messages associated to this response", Required = false)]
--the response object property
[SwaggerObjectProperty( ObjectId = "Object1",  Type = "Boolean", Name = "isAsync", Description = "Specifies if the request associated to this response was performed Asynchronously or Syncronously", Required = false)]
*/